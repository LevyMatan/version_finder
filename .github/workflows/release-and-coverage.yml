name: Release and Coverage

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    concurrency: release

    permissions:
      id-token: write
      contents: write

    steps:
      # Enable debug logging for actions
      - name: Enable debug logging
        run: echo "ACTIONS_STEP_DEBUG=true" >> $GITHUB_ENV

      - name: Setup | Checkout Repository at workflow sha
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      # Add environment inspection
      - name: Debug | Environment Information
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "GitHub SHA: ${{ github.sha }}"
          echo "GitHub Event Name: ${{ github.event_name }}"
          echo "Runner OS: ${{ runner.os }}"
          pwd
          ls -la

      - name: Setup | Force correct release branch on workflow sha
        run: |
          git checkout -B ${{ github.ref_name }} ${{ github.sha }}
          # Add git status check
          git status
          git branch -v

      - name: Setup | Create python virtual env
        run: |
          python -m venv .venv
          source .venv/bin/activate

      - name: Setup | Install python-semantic-release
        run: |
          source .venv/bin/activate
          pip install python-semantic-release
          # Add version check
          python -m pip list | grep semantic-release

      - name: Install python custom-scope-commit-parser
        run: |
          source .venv/bin/activate
          pip install wheel  # To avoid the "legacy setup.py install" warning
          pip install ./custom_scope_commit_parser/
          pip show custom-scope-commit-parser
          # Add directory check
          ls -la custom_scope_commit_parser/
          # test module is calleable
          python -m pip list
          python -c "import sys; print(sys.path)"
          echo "Just finished to import stuff"
          echo "now going to run python -c 'import custom_scope_commit_parser'"
          python -c "import custom_scope_commit_parser"
          echo "Passed !!!!'"
          # cd core && python -c "import custom_scope_commit_parser"

      # Debug core release
      - name: Debug | Pre-core release check
        run: |
          source .venv/bin/activate
          echo "Entering core directory"
          cd core
          pip install ../custom_scope_commit_parser/
          ls -la
          python -c "import custom_scope_commit_parser"
          git log -3 --pretty=format:"%h - %s (%cr)"
          python -c "import custom_scope_commit_parser"

      - name: Semantic Version Release for core
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Add debug mode for semantic-release
          SEMANTIC_RELEASE_DEBUG: true
        run: |
          source .venv/bin/activate
          cd core && semantic-release version

      # Debug CLI release
      - name: Debug | Pre-cli release check
        run: |
          echo "Current git status"
          git status
          echo "Latest commits"
          git log -3 --pretty=format:"%h - %s (%cr)"

      - name: Pull latest changes for cli
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git fetch --all
          git rebase origin/main
          # Add rebase status check
          git status
          git log -1

      - name: Semantic Version Release for cli
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEMANTIC_RELEASE_DEBUG: true
        run: |
          source .venv/bin/activate
          echo "Entering cli directory"
          cd cli
          ls -la
          semantic-release version

      # Debug GUI release
      - name: Debug | Pre-gui release check
        run: |
          echo "Current git status"
          git status
          echo "Latest commits"
          git log -3 --pretty=format:"%h - %s (%cr)"

      - name: Pull latest changes for gui
        run: |
          git config user.name "github-actions"
          git config user.email "actions@users.noreply.github.com"
          git fetch --all
          git rebase origin/main
          # Add rebase status check
          git status
          git log -1

      - name: Semantic Version Release for gui
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SEMANTIC_RELEASE_DEBUG: true
        run: |
          source .venv/bin/activate
          echo "Entering gui directory"
          cd gui
          ls -la
          semantic-release version

      # Final status check
      - name: Debug | Final Status
        if: always()
        run: |
          echo "Final git status"
          git status
          echo "Final directory structure"
          ls -la
          echo "Python packages installed"
          pip list

  coverage:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          make install-dev
          git config --global init.defaultBranch main
      - name: Run code coverage report
        run: make coverage
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'htmlcov'
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
